theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(size = 12)
)
# Save the plot if output_file is provided
if (!is.null(output_file)) {
ggsave(output_file, plot = plot, width = 10, height = 6)
}
return(plot)
}
# Generate and save plots for Finite and Infinite Games
finite_plot <- generate_histogram(
finite_data,
"Payoff Distribution (Finite Game)",
"Finite_Game_Payoff_Distribution.pdf"
)
infinite_plot <- generate_histogram(
infinite_data,
"Payoff Distribution (Infinite Game)",
"Infinite_Game_Payoff_Distribution.pdf"
)
# Print plots to check in RStudio Viewer
print(finite_plot)
print(infinite_plot)
#*====================== 5. SUMMARY TABLE GENERATION ======================================*#
# STEP 5: Generate Summary Tables with Descriptive Statistics
# Load necessary libraries for table formatting
library(kableExtra)
# 5.1 Combine Finite and Infinite Game Data
finite_data <- finite_data %>%
mutate(game_type = "Finite")
infinite_data <- infinite_data %>%
mutate(game_type = "Infinite")
combined_data <- bind_rows(finite_data, infinite_data)
# 5.2 Generate Summary Statistics
summary_table <- combined_data %>%
group_by(game_type, category) %>%
summarise(
Count = n(),
Mean_Payoff = mean(avg_payoff, na.rm = TRUE),
Median_Payoff = median(avg_payoff, na.rm = TRUE),
SD_Payoff = sd(avg_payoff, na.rm = TRUE),
Min_Payoff = min(avg_payoff, na.rm = TRUE),
Max_Payoff = max(avg_payoff, na.rm = TRUE),
.groups = "drop"
)
# 5.3 Display Summary Table in RStudio Viewer
print(summary_table)
# 5.3 Add Percentage Columns
summary_table <- combined_data %>%
group_by(game_type, category) %>%
summarise(
Count = n(),
Percentage = (n() / sum(n())) * 100,
Mean_Payoff = mean(avg_payoff, na.rm = TRUE),
Median_Payoff = median(avg_payoff, na.rm = TRUE),
SD_Payoff = sd(avg_payoff, na.rm = TRUE),
Min_Payoff = min(avg_payoff, na.rm = TRUE),
Max_Payoff = max(avg_payoff, na.rm = TRUE),
.groups = "drop"
)
summary_table <- combined_data %>%
group_by(game_type, category) %>%
summarise(
Count = n(),
Mean_Payoff = mean(avg_payoff, na.rm = TRUE),
Median_Payoff = median(avg_payoff, na.rm = TRUE),
SD_Payoff = sd(avg_payoff, na.rm = TRUE),
Variance_Payoff = var(avg_payoff, na.rm = TRUE),
Min_Payoff = min(avg_payoff, na.rm = TRUE),
Max_Payoff = max(avg_payoff, na.rm = TRUE),
.groups = "drop"
)
# Perform ANOVA to test for differences in Mean_Payoff across strategies and game types
anova_result <- aov(Mean_Payoff ~ game_type * category, data = summary_table)
summary(anova_result)
# 5.4 Create a Well-Formatted Table Using kable and kableExtra
summary_table_formatted <- summary_table %>%
arrange(game_type, category) %>%
mutate(
game_type = factor(game_type, levels = c("Finite", "Infinite")),
category = factor(category, levels = c("Only TFT", "TFTA", "All Strategies"))
)
# Generate the table with corrected header span
formatted_table <- summary_table_formatted %>%
kable(
caption = "Summary Statistics of Average Payoffs by Game Type and Strategy Category",
format = "html",
digits = 2,
align = "c"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) %>%
add_header_above(c(" " = 2, "Payoff Statistics" = 6)) %>%  # Corrected span
column_spec(1, bold = TRUE) %>%
column_spec(2, bold = TRUE)
# Display the formatted table in RStudio Viewer
print(formatted_table)
# 5.5 (Optional) Save the Summary Table as an HTML File
# Uncomment the following lines if you wish to save the table externally
# html_table <- summary_table_formatted %>%
#   kable(
#     format = "html",
#     digits = 2,
#     align = "c"
#   ) %>%
#   kable_styling(
#     bootstrap_options = c("striped", "hover", "condensed"),
#     full_width = FALSE,
#     position = "center"
#   ) %>%
#   add_header_above(c(" " = 2, "Payoff Statistics" = 6)) %>%  # Corrected span
#   column_spec(1, bold = TRUE) %>%
#   column_spec(2, bold = TRUE)
# # Save the HTML table
# save_kable(html_table, "Summary_Table_Average_Payoffs.html")
# 5.6 Save the Summary Table as a PDF File
# Ensure you have the 'webshot' package installed and PhantomJS set up for PDF conversion
install.packages("webshot")
webshot::install_phantomjs()
summary_table_formatted %>%
kable(
format = "html",
digits = 2,
align = "c"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) %>%
add_header_above(c(" " = 2, "Payoff Statistics" = 6)) %>%  # Corrected span
column_spec(1, bold = TRUE) %>%
column_spec(2, bold = TRUE) %>%
save_kable("Summary_Table_Average_Payoffs.pdf")
#*====================== END OF SUMMARY TABLE GENERATION ===============================*#
#*
#*# Inspect the structure of summary_table
str(summary_table)
# 필요한 라이브러리 설치 및 로드
if (!require("kableExtra")) install.packages("kableExtra")
if (!require("webshot")) install.packages("webshot")
webshot::install_phantomjs()
library(dplyr)
library(kableExtra)
# 1. Finite 및 Infinite 데이터를 합친 후 요약 통계 생성
finite_data <- finite_data %>%
mutate(game_type = "Finite")
infinite_data <- infinite_data %>%
mutate(game_type = "Infinite")
combined_data <- bind_rows(finite_data, infinite_data)
summary_table <- combined_data %>%
group_by(game_type, category) %>%
summarise(
Count = n(),
Mean_Payoff = round(mean(avg_payoff, na.rm = TRUE), 2),
Median_Payoff = round(median(avg_payoff, na.rm = TRUE), 2),
SD_Payoff = round(sd(avg_payoff, na.rm = TRUE), 2),
Min_Payoff = round(min(avg_payoff, na.rm = TRUE), 2),
Max_Payoff = round(max(avg_payoff, na.rm = TRUE), 2),
.groups = "drop"
)
# 2. 요약 테이블 보기 좋게 포맷
formatted_table <- summary_table %>%
arrange(game_type, category) %>%
kable(
caption = "Summary Statistics of Average Payoffs by Game Type and Strategy Category",
format = "html",
align = "c"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) %>%
add_header_above(c(" " = 2, "Payoff Statistics" = 5)) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, bold = TRUE)
# 3. PDF로 저장
save_kable(formatted_table, "Summary_Table_Average_Payoffs.pdf")
# 현재 작업 디렉토리 확인
getwd()
#*====================================================================================================================================*#
#* UPDATED: 2024-11-21
#* TASK: Generate and Compare Payoff Distribution Histograms for Finite and Infinite Games
#* GOAL:
#*   - Merge new data and meta data from Embrey et al. to create a unified dataset for analysis.
#*   - Categorize payoffs into three strategy groups for better comparison:
#*       *1) Only TFT (TFT == 1 and Grim == 0),
#*       *2) TFTA (strategies consistent with TFT),
#*       *3) All Strategies combined (default category).
#*   - Calculate average payoffs per game for both Finite (horizon < 10) and Infinite (horizon == 10) games.
#*   - Generate histograms that:
#*       - Highlight payoff distributions for the three strategy groups.
#*       - Use distinct colors and clear formatting for academic presentation.
#*   - Save histograms as PDF files for inclusion in research papers.
#*====================================================================================================================================*#
# (Your code on 2024-11-12)
#if (FALSE) {
#  2024-11-12
#  This code merges the meta data with the new data in the Embrey et all paper.
#  The goal is to compare TFT and GRIM to average player payoffs by horizon and sizebad
#}
### DATA PREPARATION: PREPROCESSING ###
# Load necessary libraries
library(tidyverse)
# Load the data
# Read the file as a tab-separated file
#### I changed the file path to our DropBox folder name. Please check if it works right!
data <- read.table("~/Columbia Dropbox/Kwon Hana/Prof. W.Bentley MacLeod & Hana Kwon/Data/Embrey_2018a_new_data.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
## get data from other studies
data0 <- read.table("~/Columbia Dropbox/Kwon Hana/Prof. W.Bentley MacLeod & Hana Kwon/Data/Embrey_2018a_meta_data.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data  <- bind_rows(data, data0)
## remove paper and order which are not needed
data   <-  data %>% select (-paper, -order)
# Check the structure of the data to verify column names and data types
head(data)
#str(data)
#View(data) # View the data in a table format
#*====================== 1. ARRANGING COLUMNS ==========================================*#
# STEP 1: Arrange data columns
# Goal: Ensure the data is sorted and structured for downstream analysis.
# Action: Sort data by session, player ID, supergame, and round.
sorted_data <- data %>%
arrange(session, id, supergame, round) %>%  # Sorting
select(session, everything())               # Reorder columns with 'session' first
#*====================== 2. ADD VARIABLES/COLUMNS ======================================*#
# STEP 2: Add necessary variables to analyze strategies and payoffs.
#*============== 2.1 Add Opponent's Cooperation (ocoop) ================================*#
# Goal: Create a column to track the opponent's cooperation behavior for each round.
sorted_data <- sorted_data %>%
left_join(
sorted_data %>% select(session, supergame, round, id = oid, ocoop = coop), # Opponent's coop
by = c("session", "supergame", "round", "id")
)
#*============== 2.2 Add Strategy Variables (TFT and Grim) ============================*#
# Goal: Define Tit-for-Tat (TFT) and Grim (G0) strategies based on game logic.
sorted_data <- sorted_data %>%
mutate(
TFT = ifelse(round == 1, 1, lag(ocoop)),
G0 = ifelse(round == 1, 1, ifelse(lag(ocoop) == 0, 0, ifelse(lag(coop) == 0, 0, 1))),
payoff = case_when(
coop == 1 & ocoop == 1 ~ 1.0,
coop == 1 & ocoop == 0 ~ -1.0,
coop == 0 & ocoop == 1 ~ 1.5,
coop == 0 & ocoop == 0 ~ 0.0
),
category = case_when(
TFT == 1 & G0 == 0 ~ "Only TFT",
TFT == 1 ~ "TFTA",
TRUE ~ "All Strategies"
)
)
#*============== 2.3 Add Payoff Calculation ===========================================*#
# Goal: Calculate payoffs based on cooperation (coop) and opponent's cooperation (ocoop).
sorted_data <- sorted_data %>%
mutate(
r = 1.0,               # Reward for mutual cooperation
s = -1.0,              # Sucker's payoff
t = 1.5,               # Temptation payoff
p = 0.0,               # Punishment for mutual defection
payoff = case_when(    # Calculate payoffs
coop == 1 & ocoop == 1 ~ r,
coop == 1 & ocoop == 0 ~ s,
coop == 0 & ocoop == 1 ~ t,
coop == 0 & ocoop == 0 ~ p
)
)
#*============== 2.4 Categorize Strategies ============================================*#
# Goal: Group data into three categories for analysis:
#       - "Only TFT" : When TFT is active, and Grim is not.
#       - "TFTA"     : Strategies consistent with TFT.
#       - "All Strategies" : Default category.
sorted_data <- sorted_data %>%
mutate(
category = case_when(
TFT == 1 & G0 == 0 ~ "Only TFT",
TFT == 1 ~ "TFTA",
TRUE ~ "All Strategies"
)
)
#*====================== 3. COLLAPSE DATA FOR ANALYSIS =================================*#
# STEP 3: Collapse data to game level for summary statistics and histograms.
# Collapse data for Finite Games
finite_data <- sorted_data %>%
filter(horizon < 10) %>%
group_by(session, id, supergame, category) %>%
summarise(avg_payoff = mean(payoff, na.rm = TRUE), .groups = "drop")
# Collapse data for Infinite Games
infinite_data <- sorted_data %>%
filter(horizon == 10) %>%
group_by(session, id, supergame, category) %>%
summarise(avg_payoff = mean(payoff, na.rm = TRUE), .groups = "drop")
#*====================== 4. HISTOGRAM GENERATION =======================================*#
# STEP 4: Generate histograms to visualize payoff distribution across strategies.
### Generate Histograms ###
generate_histogram <- function(data, title, output_file = NULL) {
plot <- ggplot(data, aes(x = avg_payoff, fill = category)) +
geom_histogram(
binwidth = 0.2,
position = "dodge",
alpha = 0.7,
color = "black"
) +
scale_fill_manual(
values = c("Only TFT" = "red", "TFTA" = "orange", "All Strategies" = "skyblue"),
breaks = c("Only TFT", "TFTA", "All Strategies")
) +
labs(
title = title,
x = "Average Payoff",
y = "Frequency",
fill = "Strategy"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(size = 12)
)
# Save the plot if output_file is provided
if (!is.null(output_file)) {
ggsave(output_file, plot = plot, width = 10, height = 6)
}
return(plot)
}
# Generate and save plots for Finite and Infinite Games
finite_plot <- generate_histogram(
finite_data,
"Payoff Distribution (Finite Game)",
"Finite_Game_Payoff_Distribution.pdf"
)
infinite_plot <- generate_histogram(
infinite_data,
"Payoff Distribution (Infinite Game)",
"Infinite_Game_Payoff_Distribution.pdf"
)
# Print plots to check in RStudio Viewer
print(finite_plot)
print(infinite_plot)
#*====================== 5. SUMMARY TABLE GENERATION ======================================*#
# STEP 5: Generate Summary Tables with Descriptive Statistics
# Load necessary libraries for table formatting
library(kableExtra)
# 5.1 Combine Finite and Infinite Game Data
finite_data <- finite_data %>%
mutate(game_type = "Finite")
infinite_data <- infinite_data %>%
mutate(game_type = "Infinite")
combined_data <- bind_rows(finite_data, infinite_data)
# 5.2 Generate Summary Statistics
summary_table <- combined_data %>%
group_by(game_type, category) %>%
summarise(
Count = n(),
Mean_Payoff = mean(avg_payoff, na.rm = TRUE),
Median_Payoff = median(avg_payoff, na.rm = TRUE),
SD_Payoff = sd(avg_payoff, na.rm = TRUE),
Min_Payoff = min(avg_payoff, na.rm = TRUE),
Max_Payoff = max(avg_payoff, na.rm = TRUE),
.groups = "drop"
)
# 5.3 Display Summary Table in RStudio Viewer
print(summary_table)
# 5.3 Add Percentage Columns
summary_table <- combined_data %>%
group_by(game_type, category) %>%
summarise(
Count = n(),
Percentage = (n() / sum(n())) * 100,
Mean_Payoff = mean(avg_payoff, na.rm = TRUE),
Median_Payoff = median(avg_payoff, na.rm = TRUE),
SD_Payoff = sd(avg_payoff, na.rm = TRUE),
Min_Payoff = min(avg_payoff, na.rm = TRUE),
Max_Payoff = max(avg_payoff, na.rm = TRUE),
.groups = "drop"
)
summary_table <- combined_data %>%
group_by(game_type, category) %>%
summarise(
Count = n(),
Mean_Payoff = mean(avg_payoff, na.rm = TRUE),
Median_Payoff = median(avg_payoff, na.rm = TRUE),
SD_Payoff = sd(avg_payoff, na.rm = TRUE),
Variance_Payoff = var(avg_payoff, na.rm = TRUE),
Min_Payoff = min(avg_payoff, na.rm = TRUE),
Max_Payoff = max(avg_payoff, na.rm = TRUE),
.groups = "drop"
)
# Perform ANOVA to test for differences in Mean_Payoff across strategies and game types
anova_result <- aov(Mean_Payoff ~ game_type * category, data = summary_table)
summary(anova_result)
# 5.4 Create a Well-Formatted Table Using kable and kableExtra
summary_table_formatted <- summary_table %>%
arrange(game_type, category) %>%
mutate(
game_type = factor(game_type, levels = c("Finite", "Infinite")),
category = factor(category, levels = c("Only TFT", "TFTA", "All Strategies"))
)
# Generate the table with corrected header span
formatted_table <- summary_table_formatted %>%
kable(
caption = "Summary Statistics of Average Payoffs by Game Type and Strategy Category",
format = "html",
digits = 2,
align = "c"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) %>%
add_header_above(c(" " = 2, "Payoff Statistics" = 6)) %>%  # Corrected span
column_spec(1, bold = TRUE) %>%
column_spec(2, bold = TRUE)
# Display the formatted table in RStudio Viewer
print(formatted_table)
# 5.5 (Optional) Save the Summary Table as an HTML File
# Uncomment the following lines if you wish to save the table externally
# html_table <- summary_table_formatted %>%
#   kable(
#     format = "html",
#     digits = 2,
#     align = "c"
#   ) %>%
#   kable_styling(
#     bootstrap_options = c("striped", "hover", "condensed"),
#     full_width = FALSE,
#     position = "center"
#   ) %>%
#   add_header_above(c(" " = 2, "Payoff Statistics" = 6)) %>%  # Corrected span
#   column_spec(1, bold = TRUE) %>%
#   column_spec(2, bold = TRUE)
# # Save the HTML table
# save_kable(html_table, "Summary_Table_Average_Payoffs.html")
# 5.6 Save the Summary Table as a PDF File
# Ensure you have the 'webshot' package installed and PhantomJS set up for PDF conversion
install.packages("webshot")
webshot::install_phantomjs()
summary_table_formatted %>%
kable(
format = "html",
digits = 2,
align = "c"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) %>%
add_header_above(c(" " = 2, "Payoff Statistics" = 6)) %>%  # Corrected span
column_spec(1, bold = TRUE) %>%
column_spec(2, bold = TRUE) %>%
save_kable("Summary_Table_Average_Payoffs.pdf")
#*====================== END OF SUMMARY TABLE GENERATION ===============================*#
#*
#*# Inspect the structure of summary_table
str(summary_table)
# 필요한 라이브러리 설치 및 로드
if (!require("kableExtra")) install.packages("kableExtra")
if (!require("webshot")) install.packages("webshot")
webshot::install_phantomjs()
library(dplyr)
library(kableExtra)
# 1. Finite 및 Infinite 데이터를 합친 후 요약 통계 생성
finite_data <- finite_data %>%
mutate(game_type = "Finite")
infinite_data <- infinite_data %>%
mutate(game_type = "Infinite")
combined_data <- bind_rows(finite_data, infinite_data)
summary_table <- combined_data %>%
group_by(game_type, category) %>%
summarise(
Count = n(),
Mean_Payoff = round(mean(avg_payoff, na.rm = TRUE), 2),
Median_Payoff = round(median(avg_payoff, na.rm = TRUE), 2),
SD_Payoff = round(sd(avg_payoff, na.rm = TRUE), 2),
Min_Payoff = round(min(avg_payoff, na.rm = TRUE), 2),
Max_Payoff = round(max(avg_payoff, na.rm = TRUE), 2),
.groups = "drop"
)
# 2. 요약 테이블 보기 좋게 포맷
formatted_table <- summary_table %>%
arrange(game_type, category) %>%
kable(
caption = "Summary Statistics of Average Payoffs by Game Type and Strategy Category",
format = "html",
align = "c"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center"
) %>%
add_header_above(c(" " = 2, "Payoff Statistics" = 5)) %>%
column_spec(1, bold = TRUE) %>%
column_spec(2, bold = TRUE)
# 3. PDF로 저장
save_kable(formatted_table, "Summary_Table_Average_Payoffs.pdf")
# 현재 작업 디렉토리 확인
getwd()
# 현재 작업 디렉토리 확인
getwd()
