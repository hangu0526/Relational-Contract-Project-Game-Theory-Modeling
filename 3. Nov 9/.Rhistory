# Load necessary libraries
library(dplyr)
# Load the data
# Read the file as a tab-separated file
#### I changed the file path to our DropBox folder name. Please check if it works right!
data <- read.table("../Data/Embrey_2018a_new_data.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Load the data
# Read the file as a tab-separated file
#### I changed the file path to our DropBox folder name. Please check if it works right!
data <- read.table("../../Data/Embrey_2018a_new_data.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#*=============== 1. Arrange columns =======================================================================*#
# Sort data by session, player ID, supergame, and round
sorted_data <- data %>%
arrange(session, id, supergame, round)
# Reorder columns to place 'session' at the front
sorted_data <- sorted_data %>%
select(session, everything())
# Check if the columns are arranged as intended
View(sorted_data)
#*============== 2.1. Add opponent's cooperation variable (ocoop) ==========================================*#
# Add the opponent's cooperation info (ocoop) by joining the data to itself on id and oid
#** This way, each player's row gets matched with the correct opponent's cooperation data for every round in the same game
sorted_data <- sorted_data %>%
left_join(
sorted_data %>% select(session, supergame, round, id = oid, ocoop = coop), # Selects opponent's cooperation (coop) for matching
by = c("session", "supergame", "round", "id") # Joins on session, supergame, round, and id to map correct opponent data
)
#*============== 2.2. Add Always Cooperate (AC) and Always Defect (AD) strategy variables ==================*#
# AC: Always cooperate in all rounds
# AD: Always defect in all rounds
sorted_data <- sorted_data %>%
mutate(
AC = ifelse(coop == 1, 1, 0),  # 1 if the player cooperates in all rounds
AD = ifelse(coop == 0, 1, 0)   # 1 if the player defects in all rounds
)
#*============== 2.3. Add tit-for-tat (TFT) strategy variable ==============================================*#
# TFT starts with cooperation in the first round and mimics the opponent’s previous action in subsequent rounds
sorted_data <- sorted_data %>%
mutate(TFT = ifelse(round == 1, 1, lag(ocoop)))
#*============== 2.4. Add Grim (G) Strategy variables (G0, G1, G2, G3) =====================================*#
# Add Grim strategy variables (G0, G1, G2, G3) based on the opponent’s cooperation history
# G0 cooperates in the first round and defects if the opponent defected in the previous round
# G1 defects in the last round; otherwise, it cooperates unless G0 or the opponent defected in the previous round
# G2 defects in the last two rounds; otherwise, it cooperates unless G1 or the opponent defected in the previous round
# G3 defects in the last three rounds; otherwise, it cooperates unless G2 or the opponent defected in the previous round
sorted_data <- sorted_data %>%
mutate(
G0 = ifelse(round == 1, 1, ifelse(lag(ocoop) == 0, 0, 1)),
G1 = ifelse(round == horizon, 0, ifelse(lag(G0) == 0 | lag(ocoop) == 0, 0, 1)),
G2 = ifelse(round >= horizon - 1, 0, ifelse(lag(G1) == 0 | lag(ocoop) == 0, 0, 1)),
G3 = ifelse(round >= horizon - 2, 0, ifelse(lag(G2) == 0 | lag(ocoop) == 0, 0, 1))
)
#*============== 2.5. Add payoff calculation ===============================================================*#
# Assuming that cooperation leads to a certain payoff, we calculate the payoff based on coop and ocoop values.
# Customize this formula based on the specific payoff rules of your game.
sorted_data <- sorted_data %>%
mutate(
payoff = case_when(
coop == 1 & ocoop == 1 ~ r,        # Both cooperate
coop == 1 & ocoop == 0 ~ s,        # Player cooperates, opponent defects
coop == 0 & ocoop == 1 ~ t,        # Player defects, opponent cooperates
coop == 0 & ocoop == 0 ~ p         # Both defect
)
)
#*============== 2.6. Add Agreement(Consistency) Check Variables (G1A and TFTA) =============================*#
# ACA: Check if AC (Always Cooperate) strategy matches the actual cooperation (coop) behavior
# ADA: Check if AD (Always Defect) strategy matches the actual cooperation (coop) behavior
# G0A, G1A, G2A, G3A: Check if Grim strategies (G0, G1, G2, G3) match the actual cooperation behavior
# TFTA: Check if TFT strategy matches the actual cooperation (coop) behavior
sorted_data <- sorted_data %>%
mutate(
ACA = ifelse(coop == 1, 1, 0),   # 1 if Always Cooperate strategy is followed
ADA = ifelse(coop == 0, 1, 0),   # 1 if Always Defect strategy is followed
G0A = ifelse(G0 == coop, 1, 0),  # 1 if G0 matches actual behavior
G1A = ifelse(G1 == coop, 1, 0),  # 1 if G1 matches actual behavior
G2A = ifelse(G2 == coop, 1, 0),  # 1 if G2 matches actual behavior
G3A = ifelse(G3 == coop, 1, 0),  # 1 if G3 matches actual behavior
TFTA = ifelse(TFT == coop, 1, 0) # 1 if TFT matches actual behavior
)
# Load necessary libraries
library(dplyr)
source("~/WBM-Files Dropbox/Bentley MacLeod/Coauthors-Shared/RA-Hana-Kwon/Analysis/3. Nov 9/TFT_241111_after meeting.R")
print(summary_table)
